plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.5'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20'
    id 'org.jetbrains.kotlin.plugin.lombok' version '1.8.10'
    id 'io.freefair.lombok' version '5.3.0'
}

group = 'vn.unicloud'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17

ext {
    axonVersion = "4.7.0"
    lombokVersion = "1.18.26"
    monetaVersion = "1.4.2"
    keycloakVersion = "19.0.3"
    openapiVersion = "2.1.0"
    specArgVersion = "3.0.0"
    springCloudVersion = "2022.0.2"
    zxingVersion = "3.5.1"
    temporalVersion = "1.19.1"
}

allprojects {
    repositories {
        mavenCentral()
        mavenLocal()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jetbrains.kotlin.plugin.lombok'

//    bootJar { enabled = false }
    dependencies {
        implementation("org.axonframework:axon-spring-boot-starter:${axonVersion}") {
            exclude group: 'org.axonframework', module: 'axon-server-connector'
        }
        implementation "org.axonframework:axon-spring-boot-autoconfigure:$axonVersion"
        implementation "org.axonframework.extensions.amqp:axon-amqp-spring-boot-starter:${axonVersion}"

        implementation "org.springframework.boot:spring-boot-starter-actuator"
        implementation "org.springframework.boot:spring-boot-starter-amqp"
        implementation "org.springframework.boot:spring-boot-starter-data-jpa"
        implementation "org.springframework.boot:spring-boot-starter-data-redis"

        implementation "org.springframework.boot:spring-boot-starter-validation"
        implementation "org.springframework.boot:spring-boot-starter-web"
        implementation "org.springframework.boot:spring-boot-starter-webflux"
        implementation "org.springframework.boot:spring-boot-starter-websocket"

        // Security
        implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
        implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
        implementation "org.springframework.boot:spring-boot-starter-security"
        implementation "org.keycloak:keycloak-admin-client:${keycloakVersion}"

        // QR Codegen
        implementation "com.google.zxing:core:${zxingVersion}"
        implementation "com.google.zxing:javase:${zxingVersion}"

        // Workflow - Orchestrator
        implementation "io.temporal:temporal-sdk:${temporalVersion}"

        // Database Extensions
        implementation "net.kaczmarzyk:specification-arg-resolver:${specArgVersion}"
        implementation "com.vladmihalcea:hibernate-types-60:2.21.1"

        // API Documentation
        implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$openapiVersion"

        // Others
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
        implementation "org.jetbrains.kotlin:kotlin-reflect"
        implementation "io.github.microutils:kotlin-logging-jvm:2.0.11"
        implementation "com.fasterxml.jackson.module:jackson-module-kotlin"

        compileOnly "org.projectlombok:lombok:${lombokVersion}"

        runtimeOnly "io.micrometer:micrometer-registry-prometheus"
        runtimeOnly "org.postgresql:postgresql"

        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testImplementation "org.axonframework:axon-test:$axonVersion"
        testImplementation "org.springframework.boot:spring-boot-starter-test"
        testImplementation "io.projectreactor:reactor-test"
        testImplementation "org.springframework.amqp:spring-rabbit-test"
        testImplementation "org.springframework.security:spring-security-test"
        testImplementation "org.mockito:mockito-core:2.19.0"
        testImplementation "org.amshove.kluent:kluent:1.72"
        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0"
        // Tracing
//        implementation "io.micrometer:micrometer-tracing-bridge-brave"
//        implementation "io.zipkin.reporter2:zipkin-reporter-brave"
    }


}

dependencies {
    implementation project(":application")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

bootJar {
    layered {
        includeLayerTools = true
    }
    setMainClass("vn.unicloud.fnb.Application")
}

test {
    useJUnitPlatform()
}
